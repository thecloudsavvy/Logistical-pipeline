name: Deployment Workflow
on:
    push:
      branches:
        - master

jobs:
    pusher:
        runs-on: self-hosted
        steps:
            - name: "echo the code"
              run: echo "Push the code"
            - name: confirm the repository of Docker Hub
              uses: actions/checkout@v4
            - name: Logging into Docker Hub
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_PASSWORD }}
            - name: "Build the image for the App"
              env:
                IMAGE_NAME: logis2
                VERSION: latest
                USERNAME: abatan
              run: |
                  docker build -t $USERNAME/$IMAGE_NAME:$VERSION .
                  docker push $USERNAME/$IMAGE_NAME:$VERSION
            - name: Install unzip
              run: |
                sudo apt update
                sudo apt install unzip
            - name: Checkout code
              uses: actions/checkout@v2
      
            - name: Setup Java
              uses: actions/setup-java@v2
              with:
                distribution: 'adopt'
                java-version: '11'

            - name: Run OWASP Dependency Check
              run: |
                docker run --rm \
                -v $(pwd):/src \
                -e NVD_API_KEY=${{ secrets.NVD_API_KEY }} \
                owasp/dependency-check:latest \
                --scan /src \
                --format HTML \
                --project "My Project" \
                --out /github/workspace/report
      
            - name: Upload OWASP Dependency Check report
              uses: actions/upload-artifact@v2
              with:
                  name: dependency-check-report
                  path: index.html


            # - name: Set up JDK
            #   uses: actions/setup-java@v2
            #   with:
            #     java-version: '11'
            #     distribution: 'adopt'
      
            # - name: Set JAVA_HOME
            #   run: |
            #     echo "JAVA_HOME=$(which java)" | tee -a $GITHUB_ENV
            #     export JAVA_HOME=$JAVA_HOME

            # - name: Download OWASP Dependency Check
            #   run: |
            #     VERSION=$(curl -s https://jeremylong.github.io/DependencyCheck/current.txt)
            #     curl -sL "https://github.com/jeremylong/DependencyCheck/releases/download/v$VERSION/dependency-check-$VERSION-release.zip" --output dependency-check.zip
            #     unzip dependency-check.zip

            # - name: Set PATH for Dependency-Check
            #   run: |
            #     export PATH="./dependency-check/bin:$PATH"
                
            # - name: Run OWASP Dependency-Check
            #   run: |
            #     ./dependency-check/bin/dependency-check.sh --out report.html --scan .
            #     rm -rf dependency-check*
            # - name: Run OWASP Dependency-Check
            #   run: |
            # - name: Upload OWASP Dependency-Check report
            #   uses: actions/upload-artifact@v2
            #   with:
            #       name: artifact
            #       path: dependency-check-report

            # - name: "install apache"
            #   run: |
            #       sudo apt-get update
            #       sudo apt-get install apache2 -y
            #       sudo systemctl start apache2
            #       sudo systemctl enable apache2
            #       sudo chown -R $USER:$USER /var/www/html
            #       cd /var/www/html
            #       sudo rm -rf index.html
            #       git clone https://github.com/thecloudsavvy/Logistical-pipeline.git . 
            #       sudo systemctl restart apache2  

             # - name: SonarQube Scan
            #   uses: sonarsource/sonarqube-scan-action@v1.2.0
            #   env:
            #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            #     SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}